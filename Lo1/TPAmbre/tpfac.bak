#lang racket

; 1 Representation des propositions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define F '(<-> (^ a c) (v (! a) (-> c (^ B T)))))

; Q1
(define F1 '(<-> (^ a b) (v (! a) b)))
(define F2 '(v (! (^ a (! b))) (! (-> a b))))
(define F3 '(^ (! (-> a (v a b))) (! (! (^ a (v b (! c)))))))
(define F4 '(^ (v (! a) b d) (v (! d) c) (v c a) (v (! c) b) (v (! b) d)))

; Q2
(define (neg? f) (eq? f '!))
(define (and? f) (eq? f '^))
(define (or? f) (eq? f 'v))
(define (imp? f) (eq? f '->))
(define (equ? f) (eq? f '<->))
(define (top? f) (eq? f 'T))
(define (bot? f) (eq? f 'B))
(define (symbLog? f) (or (top? f) (bot? f) (and? f) (or? f) (neg? f) (imp? f) (equ? f)))
(define (symbProp? f) (and (symbol? f) (not (symbLog? f))))
(define (atomicFbf? f) (or (symbProp? f) (top? f) (bot? f)))
(define (conBin? f) (or (and? f) (or? f) (imp? f) (equ? f)))

; Q2
(define (fbf? f)
  (cond ((atomicFbf? f) #t)
        ((list? f) (cond ((and (= (length f) 2) (neg? (car f))) (fbf? (cadr f)) #t)
                         ((and (= (length f) 3) (conBin? (car f))) (and (fbf? (cadr f)) (fbf? (caddr f))))
                         (else #f)))
        (else #f)))


; 2 Syntaxe des propositions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (conRac f) (car f))
(define (fils f) (cadr f))
(define (filsG f) (cadr f))
(define (filsD f) (caddr f))
(define (negFbf? f) (and (not (atomicFbf? f)) (neg? (conRac f))))

; Q3 retourne le nombre de connecteurs d’une fbf (nombre d’occurrences)
(define (nbc f)
  (cond ((atomicFbf? f) 0)
        ((negFbf? f) (+ 1 (nbc (fils f))))
        (else (+ 1 (nbc (filsG f)) (nbc (filsD f))))))


; Q4 retourne la profondeur d’une fbf
(define (prof f)
  (cond ((atomicFbf? f) 0)
        ((negFbf? f) (+ 1 (prof (fils f))))
        (else (+ 1 (max (prof (filsG f)) (prof (filsD f)))))))

;Q5 retourne l’ensemble des symboles propositionnels d’une proposition donnée
(define (ensSP f)
  (cond [(or (top? f) (bot? f)) '()]
        [(atomicFbf? f) (list f)]
        [(negFbf? f) (ensSP (fils f))]
        [else (set-union (ensSP (filsG f)) (ensSP (filsD f)))]))
;Q6
;(define (affiche f)
;  (cond ((atomicFbf? f) (display f))
;        ((negFbf? f) (affiche (fils f)))
;        ((

;Q7
;(define I1 (cons 'a 1) (cons 'b 0) (cons 'c 1) null))
(define I2 (cons '(a.0) (cons '(b.0) (cons '(c.0) null))))
(define I3 (cons '(a.1) (cons '(b.1) (cons '(c.1) null))))
(define I1 '( (a . 1) (b . 0) (c . 1)))

;Q8 retourne la valeur d’interprétation (0 ou 1) d’un symbole propositionnel donné dans une interprétation donnée
(define (intSymb s I)
  (cond ((eq? (caar I) s) (cdar I))
        (else (intSymb s (cdr I)))))
;Q9
(define (intNeg b) ; Interprétation de NON d'une valeur, retournant 1 si elle est Absurde, 0 si Vra
  (if (eq? b 0) 1 0))

(define (intAnd b1 b2) ; Interprétation du ET de 2 valeurs
  (if (and (= b1 1) (= b2 1)) 1 0))

(define (intOr b1 b2) ; Interprétation du OR de 2 valeurs
  (if (or (= b1 1) (= b2 1)) 1 0))

(define (intImp b1 b2) ; Interprétation du IMPLIQUE de 2 valeurs
  (if (or (not (= b1 1) (= b2 1))) 1 0))

(define (intEqu b1 b2) ; Interprétation du EQUIVALENT de 2 valeurs
  (if (= b1 b1) 1 0))

(define intTop 1)
(define intBot 0)

;Q10 calcule la valeur de vérité d’une formule f pour une interprétation i complète pour f
(define (valV f I) 
  (cond [(symbProp? f) (intSymb f I)]
        [(top? f) intTop]
        [(bot? f) intBot]
        [(neg? f) (intNeg (valV (fils f) I))]
        [(and? (conRac f)) (intAnd (valV (filsG f) I) (valV (filsD f) I))]
        [(or? (conRac f)) (intOr (valV (filsG f) I) (valV (filsD f) I))]
        [(imp? (conRac f)) (intImp (valV (filsG f) I) (valV (filsD f) I))]
        [(equ? (conRac f)) (intEqu (valV (filsG f) I) (valV (filsD f) I))]
        [else 0]))

;Q11 une inteprétation et une fbf, retourne true si l’interprétation est un modèle de la formule 
(define (modele? f I)
  (if (= (valV f I) 1) #t #f))

;Q12
(define EIpq '[((p . 0) (q . 1))
               ((p . 0) (q . 1))
               ((p . 1) (q . 0))
               ((p . 1) (q . 1))])

; Q13 retourne l’ensemble de toutes les interprétations de ces symboles propositionnels
(define (ensInt ESP)
  (cond ((set-empty? ESP) '(()) )
        (else (let ((EnsIntCdr (ensInt (cdr ESP))))
                (set-union
                 (map [lambda (I) (cons (cons (car ESP) 0)I)] EnsIntCdr)
                 (map [lambda (I) (cons (cons (car ESP) 1) I)] EnsIntCdr)
                 )))))

;Q14 retourne true si et seulement si une fbf donnée est satisfiable
(define (satisfiable? F)
  (ormap (lambda (I) (modele? F I))
         (ensInt (ensSP F))))

;Q15 retourne true si et seulement si une fbf donnée est valide
(define (valide? F)
  (andmap (lambda (I) (modele? F I))
          (ensInt (ensSP F))))

;Q16 retourne true si et seulement si une fbf donnée est insatisfiable
(define (insatisfiable? F)
  (andmap (lambda (I) (not (modele? F I)))
          (ensInt (ensSP F))))

;Q17 teste si deux fbf données sont sémantiquement équivalentes
(define (equivalent1? f1 f2)
  (andmap (lambda (I)
            (eq? (valV f1 I) (valV f2 I)))
          (ensInt(set-union(ensSP f1) (ensSP f2)))))
            
(define (equivalent2? f1 f2)
  (valide? (list '<-> f1 f2)))

;Q18 retourne true si F 2 est conséquence logique de F 1
(define (consequance2v1 F G)
  (andmap (lambda (I)
            (if (and (= (valV F I) 1) (= (valV G I) 0)) #f #t))
            (ensInt (set-union (ensSP F) (ensSP G)))))

(define (consequnace2vInsta F G)
  (insatisfiable? (list '^ F (list '^ G))) )

(define (consequance2vValide F G)
  (valide? (list '-> F G)) )

;Q19 retourne l’ensemble des symboles propositionnels d’un ensemble de propositions
(define (ensSPallFbf EFBF)
  (if (set-empty? EFBF) '()
      (set-union (ensSP (car EFBF))
                 (ensSPallFbf (cdr EFBF)))))
;Q20 retourne true si une interprétation donnée est modèle d’un ensemble de propositions donné
(define (modeleCommun? E I)
  (if (set-empty? E) #f
  (andmap (lambda (L)
            (modele? L I))
          E)))
;Q21 retourne true si et seulement si un ensemble de propositions est contradictoire
(define (contradictoire? E)
  (if (set-empty? E) #t
      (not (ormap (lambda(I) (modeleCommun? E I)) (ensInt (ensSPallFbf E))))))

;Q22 prenant en donnée un ensemble de formules {f 1 , f 2 , ...f n } et une fbf f et retournant true si f est conséquence logique de f 1 ...f n
(define (consequence? Efbf fbf)
  (let [(A (cons fbf Efbf))]
    (ormap (lambda (I) (modeleCommun? A I)) (ensInt (ensSPallFbf A))) ))
;Q23 & Q24 a terminer
;(define (consequenceV? Ens C)

;Q25 prend en paramètre une fbf et retourne une équivalente qui ne contient pas ↔
(define (oteEqu f)
  (cond ((atomicFbf? f) f)
        ((negFbf? f) (list '!(oteEqu (fils f))))
        ((not (equ? (conRac f))) (list (conRac f) (oteEqu (filsG f)) (oteEqu (filsD f)))) 
        (else  (let ((fg (oteEqu (filsG f))) (fd (oteEqu (filsD f))))  
                 (list '^(list '-> fg fd) (list '-> fd fg))))
                 ))
;Q26 (A → B) ≡ (¬A ∨ B)
(define (oteImp f)
  (cond ((atomicFbf? f) f)
        ((negFbf? f) (list '!(oteImp (fils f))))
        ((not (imp? (conRac f))) (list (conRac f) (oteImp (filsG f)) (oteImp (filsD f)))) 
        (else  (let ((fg (oteImp (filsG f))) (fd (oteImp (filsD f))))  
                 (list 'v fd (list '! fg))))
                 ))
;Q27 (¬p ∨ p) et ⊥ ≡ (¬p ∧ p)
(define (oteCst f)
  (cond ((top? f) (list 'v 'p (list '! 'p)))
        ((bot? f) (list '^ 'p (list '! 'p)))
        ((atomicFbf? f) f)
        ((negFbf? f) (list '!(oteCst (fils f))))
        (else (let ( (fd (oteCst (filsD f))) (fg (oteCst (filsG f))))
                (list (car f) fd fg)))))

;Q28 A, ¬(A∧B) ≡ (¬A ∨ ¬B), ¬(A ∨ B) ≡ (¬A ∧ ¬B)
(define (redNeg f)
  (cond ((symbProp? f) f)
        ((not (negFbf? f)) (list (conRac f) (redNeg (filsG f)) (redNeg (fils f))))
        ((symbProp? (fils f)) f)
        ((negFbf? (fils f)) (redNeg (fils (fils f))))
        ((and? (conRac (fils f))) (list 'v (redNeg (list '! (filsG (fils f)))) (redNeg (list '! (filsD (fils f))))))
        (else (list '^ (redNeg (list '! (filsG (fils f))))))))

;Q29 (A ∨ (B ∧ C)) ≡ ((A ∨ B) ∧ (A ∨ C))
;(define (distOu f)
;  (cond ((symbProp? f) f)
;        ((negFbf? f) f)
;        ((and? (conRac f)) (list '^ (distOu( filsG f)) (distOu (filsD f))))
;        (else (let ((fg (distOu(filsG f))) (fd (distOu( filsD f))))
;                (cond((if (and? (conRac (fg))) (list '^(distOu (list 'v (fildG fg) fd)) (distOu (list 'v (filsD fg) fd))))
;                     ((if (and? (conRac (fd))) (list '^(distOu (list 'v fg (filsG fd))) (distOu (list 'v fg (filsD fd)))))
;                      (else (list 'v fg fd)))
;                      )
;                     )
;                )
;              )
;        )
;  )


(define (andFbf? f)
  (and (list? f)
       (not (atomicFbf? f))
       (and? (conRac f)) ))

(define (orFbf? f)
  (and (list? f)
       (not (atomicFbf? f))
       (or? (conRac f)) ))

(define (distOu f)
   (cond [(symbProp? f) f]
         [(negFbf? f) f]
         [(andFbf? f) (list '^ (distOu (filsG f)) (distOu (filsD f)))]
         [else (let [(fg (distOu (filsG f)))
                     (fd (distOu (filsD f)))]
                 (cond [(andFbf? fg) (list '^ (distOu (list 'v (filsG fg) fd))
                                           (distOu (list 'v (filsD fg) fd)) )]
                       [(andFbf? fd) (list '^ (distOu (list 'v fg (filsG fd)))
                                           (distOu (list 'v fg (filsD fd))) )]
                       [else (list 'v fg fd)] ))]))
;Q30 retourne une fbf logiquement équivalente sous forme conjonctive
(define (formeConj f)
  (distOu (redNeg (oteCst (oteImp (oteEqu f))))))

;;
(define (litteral? f)
  (or (symbProp? f) (and (negFbf? f) (symbProp? (fils f)))))

(define (oppose l)
  (if (symbProp? l) (list '! l) (fils l)))
;Q31 retourne la clause correspondante à cette fbf
(define (transClause f)
  (if (litteral? f) (list f)
      (set-union (transClause (filsG f)) (transClause(filsD f)))))



;Q32 une fbf sous forme conjonctive et retourne l’ensemble de clauses correspondant à cette fbf

;a testé
(define (ajoutC C EC)
  (cond [(set-empty? EC) (list C)]
        [(not(list? C)) (list EC)]
        [(set=? C (car EC)) EC]
        [else (cons (car EC)(ajoutC C (cdr EC)))]))

(define (unionEC EC1 EC2)
  (if (set-empty? EC2) EC1
      (ajoutC (car EC2)
              (unionEC EC1 (cdr EC2)))))

(define (transEnsClause f)
  (if (or (litteral? f) (orFbf? f)) (list (transClause f))
      (unionEC (transEnsClause (filsG f)) (transEnsClause(filsD f))) ))
  

;Q37 teste si elles possèdent un et un seul littéral opposé

(define (resolvable c1 c2)
  (= (set-count (set-intersect (map oppose c1) c2 )) 1))

;Q38 t calcule la clause résolvante
(define (resolvante c1 c2)
  (set-subtract (set-union c1 c2)
                (set-union (set-intersect (map oppose c1) c2)
                           (set-intersect (map oppose c2) c1)) ))

;Q39 retourne vrai si la clause vide est productible par résolution et faux sinon
;(define (ClauseVideParResolution E N)
;  (let ( (P '() ))
;    (if (empty? N) #f
;        (if
;      
;  ))