#lang racket

; 1 Representation des propositions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define F '(<-> (^ a c) (v (! a) (-> c (^ B T)))))

; Q1
(define F1 '(<-> (^ a b) (v (! a) b)))
(define F2 '(v (! (^ a (! b))) (! (-> a b))))
(define F3 '(^ (! (-> a (v a b))) (! (! (^ a (v b (! c)))))))
(define F4 '(^ (v (! a) b d) (v (! d) c) (v c a) (v (! c) b) (v (! b) d)))

; Q2
(define (neg? f) (eq? f '!))
(define (and? f) (eq? f '^))
(define (or? f) (eq? f 'v))
(define (imp? f) (eq? f '->))
(define (equ? f) (eq? f '<->))
(define (top? f) (eq? f 'T))
(define (bot? f) (eq? f 'B))
(define (symbLog? f) (or (top? f) (bot? f) (and? f) (or? f) (neg? f) (imp? f) (equ? f)))
(define (symbProp? f) (and (symbol? f) (not (symbLog? f))))
(define (atomicFbf? f) (or (symbProp? f) (top? f) (bot? f)))
(define (conBin? f) (or (and? f) (or? f) (imp? f) (equ? f)))

; Q2
(define (fbf? f)
  (cond ((atomicFbf? f) #t)
        ((list? f) (cond ((and (= (length f) 2) (neg? (car f))) (fbf? (cadr f)) #t)
                         ((and (= (length f) 3) (conBin? (car f))) (and (fbf? (cadr f)) (fbf? (caddr f))))
                         (else #f)))
        (else #f)))


; 2 Syntaxe des propositions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (conRac f) (car f))
(define (fils f) (cadr f))
(define (filsG f) (cadr f))
(define (filsD f) (caddr f))
(define (negFbf? f) (and (not (atomicFbf? f)) (neg? (conRac f))))

; Q3 retourne le nombre de connecteurs d’une fbf (nombre d’occurrences)
(define (nbc f)
  (cond ((atomicFbf? f) 0)
        ((negFbf? f) (+ 1 (nbc (fils f))))
        (else (+ 1 (nbc (filsG f)) (nbc (filsD f))))))


; Q4 retourne la profondeur d’une fbf
(define (prof f)
  (cond ((atomicFbf? f) 0)
        ((negFbf? f) (+ 1 (prof (fils f))))
        (else (+ 1 (max (prof (filsG f)) (prof (filsD f)))))))

;Q5 retourne l’ensemble des symboles propositionnels d’une proposition donnée
(define (ensSP f)
  (cond [(or (top? f) (bot? f)) '()]
        [(atomicFbf? f) (list f)]
        [(negFbf? f) (ensSP (fils f))]
        [else (set-union (ensSP (filsG f)) (ensSP (filsD f)))]))
;Q6
;(define (affiche f)
(define (chaine f)
  (cond
    ((atomicFbf? f) (symbol->string f))
    ((negFbf? f) (string-append
                  (symbol->string (conRac f)) (chaine (fils f))))
    (else (string-append
           "(" (chaine (filsG f)) " " (symbol->string (conRac f)) " " (chaine (filsD f)) ")" ))))

(define (affiche f) (display (chaine f)))

; 3 Sémantique des propositions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Q7
;(define I2 (cons '(a.0) (cons '(b.0) (cons '(c.0) null))))
;(define I3 (cons '(a.1) (cons '(b.1) (cons '(c.1) null))))
(define I3 '( (a . 1) (b . 1) (c . 1)))
(define I2 '( (a . 0) (b . 0) (c . 0)))
(define I1 '( (a . 1) (b . 0) (c . 1)))

;Q8 retourne la valeur d’interprétation (0 ou 1) d’un symbole propositionnel donné dans une interprétation donnée
(define (intSymb s I)
  (cond ((eq? (caar I) s) (cdar I))
        (else (intSymb s (cdr I)))))
;Q9
(define (intNeg b) ; Interprétation de NON d'une valeur, retournant 1 si elle est Absurde, 0 si Vra
  (if (eq? b 0) 1 0))

(define (intAnd b1 b2) ; Interprétation du ET de 2 valeurs
  (if (and (= b1 1) (= b2 1)) 1 0))

(define (intOr b1 b2) ; Interprétation du OR de 2 valeurs
  (if (or (= b1 1) (= b2 1)) 1 0))

(define (intImp b1 b2) ; Interprétation du IMPLIQUE de 2 valeurs
  (if (or (not (= b1 1)) (= b2 1)) 1 0))

(define (intEqu b1 b2) ; Interprétation du EQUIVALENT de 2 valeurs
  (if (eq? b1 b2) 1 0))

(define intTop 1)
(define intBot 0)

;Q10 calcule la valeur de vérité d’une formule f pour une interprétation i complète pour f
(define (valV f I) 
  (cond 
        [(top? f) intTop]
        [(bot? f) intBot]
        [(symbProp? f)     (intSymb f I)]
        [(neg? (conRac f)) (intNeg (valV (fils f) I))]
        [(and? (conRac f)) (intAnd (valV (filsG f) I) (valV (filsD f) I))]
        [(or?  (conRac f)) (intOr  (valV (filsG f) I) (valV (filsD f) I))]
        [(imp? (conRac f)) (intImp (valV (filsG f) I) (valV (filsD f) I))]
        [else              (intEqu (valV (filsG f) I) (valV (filsD f) I))]
        ))

;Q11 une inteprétation et une fbf, retourne true si l’interprétation est un modèle de la formule 
(define (modele? f I)
  (if (= (valV f I) 1) #t #f))

; 4 Satisfiabilité et validité d'une proposition
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Q12
(define EIpq '[((p . 0) (q . 1))
               ((p . 0) (q . 1))
               ((p . 1) (q . 0))
               ((p . 1) (q . 1))])

;Q13 retourne l’ensemble de toutes les interprétations de ces symboles propositionnels
(define (ensInt ESP)
  (cond ((set-empty? ESP) '(()) )
        (else (let ((EnsIntCdr (ensInt (cdr ESP))))
                (set-union
                 (map [lambda (I) (cons (cons (car ESP) 0)I)] EnsIntCdr)
                 (map [lambda (I) (cons (cons (car ESP) 1) I)] EnsIntCdr)
                 )))))

;Q14 retourne true si et seulement si une fbf donnée est satisfiable
(define (satisfiable? F)
  (ormap (lambda (I) (modele? F I))
         (ensInt (ensSP F))))

;Q15 retourne true si et seulement si une fbf donnée est valide
(define (valide? F)
  (andmap (lambda (I) (modele? F I))
          (ensInt (ensSP F))))
;(valide? '(v a (! a)))
;(valide? '(v a T))
;(valide? '(^ T B))
;(valide? '(v T B))

;Q16 retourne true si et seulement si une fbf donnée est insatisfiable
(define (insatisfiable? F)
  (andmap (lambda (I) (not (modele? F I)))
          (ensInt (ensSP F))))

  
; 5 Equivalence et conséquence logique
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Q17 teste si deux fbf données sont sémantiquement équivalentes
(define (equivalent1? f1 f2)
  (andmap (lambda (I)
            (eq? (valV f1 I) (valV f2 I)))
          (ensInt(set-union(ensSP f1) (ensSP f2)))))
            
(define (equivalent2? f1 f2)
  (valide? (list '<-> f1 f2)))

;Q18 retourne true si F 2 est conséquence logique de F 1
(define (consequance2v1 F G)
  (andmap (lambda (I)
            (if (and (= (valV F I) 1) (= (valV G I) 0)) #f #t))
            (ensInt (set-union (ensSP F) (ensSP G)))))

(define (consequnace2vInsta F G)
  (insatisfiable? (list '^ F (list '^ G))) )

(define (consequance2 F G)
  (valide? (list '-> F G)) )

;Q19 retourne l’ensemble des symboles propositionnels d’un ensemble de propositions
(define (ensSPallFbf EFBF)
  (if (set-empty? EFBF) '()
      (set-union (ensSP (car EFBF))
                 (ensSPallFbf (cdr EFBF)))))
;(ensSPallFbf '((^ a b)))

;Q20 retourne true si une interprétation donnée est modèle d’un ensemble de propositions donné
(define (modeleCommun? E I)
  (if (set-empty? E) #f
  (andmap (lambda (L)
            (modele? L I))
          E)))

;Q21 retourne true si et seulement si un ensemble de propositions est contradictoire
(define (contradictoire? E)
  (if (set-empty? E) #t
      (not (ormap (lambda(I) (modeleCommun? E I)) (ensInt (ensSPallFbf E))))))

;Q22 prenant en donnée un ensemble de formules {f 1 , f 2 , ...f n } et une fbf f et retournant true si f est conséquence logique de f 1 ...f n
;(define (consequence? Efbf fbf)
;  (let [(A (cons fbf Efbf))]
;    (ormap (lambda (I) (modeleCommun? A I)) (ensInt (ensSPallFbf A))) ))

(define (consequence? Efbf fbf)
  (andmap (lambda (I)
            (if (and (modeleCommun? Efbf I) (= (valV fbf I) 0) )
                #f #t))
          (ensInt (set-union (ensSPallFbf Efbf) (ensSP fbf))) ))

;Q23
(define (conjonction l)
  (cond ((null? l) 'T)
        ((null? (cdr l)) (car l))
        (else (list '^ (car l) (conjonction (cdr l))))))

(define (consequenceV l f)
  (valide? (list '-> (conjonction l) f)))

;Q24
(define (consequenceI l f)
  (insatisfiable? (list '^ (conjonction l) (list '! f))))

; 6 Mise sous forme conjonctive
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Q25 prend en paramètre une fbf et retourne une équivalente qui ne contient pas ↔
(define (oteEqu f)
  (cond ((atomicFbf? f) f)
        ((negFbf? f) (list '!(oteEqu (fils f))))
        ((not (equ? (conRac f))) (list (conRac f) (oteEqu (filsG f)) (oteEqu (filsD f)))) 
        (else  (let ((fg (oteEqu (filsG f))) (fd (oteEqu (filsD f))))  
                 (list '^(list '-> fg fd) (list '-> fd fg))))
                 ))

;Q26 (A → B) ≡ (¬A ∨ B)
(define (oteImp f)
  (cond ((atomicFbf? f) f)
        ((negFbf? f) (list '!(oteImp (fils f))))
        ((not (imp? (conRac f))) (list (conRac f) (oteImp (filsG f)) (oteImp (filsD f)))) 
        (else  (let ((fg (oteImp (filsG f))) (fd (oteImp (filsD f))))  
                 (list 'v fd (list '! fg))))
                 ))

;Q27 (¬p ∨ p) et ⊥ ≡ (¬p ∧ p)
(define (oteCste f)
  (cond ((top? f) (list 'v 'p (list '! 'p)))
        ((bot? f) (list '^ 'p (list '! 'p)))
        ((atomicFbf? f) f)
        ((negFbf? f) (list '!(oteCste (fils f))))
        (else (let ( (fd (oteCste (filsD f))) (fg (oteCste (filsG f))))
                (list (car f) fd fg)))))


;Q28 A, ¬(A∧B) ≡ (¬A ∨ ¬B), ¬(A ∨ B) ≡ (¬A ∧ ¬B)

;(define (redNeg f)
;  (cond ((symbProp? f) f)
;        ((not (negFbf? f)) (list (conRac f) (redNeg (filsG f)) (redNeg (filsD f))))
;        ((symbProp? (fils f)) f)
;        ((negFbf? (fils f)) (redNeg (fils (fils f))))
;        ((and? (conRac (fils f))) (list 'v (redNeg (list '! (filsG (fils f)))) (redNeg (list '! (filsD (fils f))))))
;        (else (list '^ (redNeg (list '! (filsG (fils f))))))))
(define (redNeg f)
  (cond
    ((atomicFbf? f) f)
    ((negFbf? f)
     (cond ((atomicFbf? (fils f)) f)
           ((negFbf? (fils f)) (redNeg (fils (fils f))))
           ((and? (conRac (fils f)))
                  (list 'v
                        (redNeg (list '! (filsG (fils f))))
                        (redNeg (list '! (filsD (fils f))))))
           ((or? (conRac (fils f)))
                  (list '^
                        (redNeg (list '! (filsG (fils f))))
                        (redNeg (list '! (filsD (fils f))))))))
    (else (list (conRac f) (redNeg (filsG f)) (redNeg (filsD f))))))

;Q29 (A ∨ (B ∧ C)) ≡ ((A ∨ B) ∧ (A ∨ C))
(define (andFbf? f)
  (and (list? f)
       (not (atomicFbf? f))
       (and? (conRac f)) ))

(define (orFbf? f)
  (and (list? f)
       (not (atomicFbf? f))
       (or? (conRac f)) ))

(define (distOu f)
   (cond [(symbProp? f) f]
         [(negFbf? f) f]
         [(andFbf? f) (list '^ (distOu (filsG f)) (distOu (filsD f)))]
         [else (let [(fg (distOu (filsG f)))
                     (fd (distOu (filsD f)))]
                 (cond [(andFbf? fg) (list '^ (distOu (list 'v (filsG fg) fd))
                                           (distOu (list 'v (filsD fg) fd)) )]
                       [(andFbf? fd) (list '^ (distOu (list 'v fg (filsG fd)))
                                           (distOu (list 'v fg (filsD fd))) )]
                       [else (list 'v fg fd)] ))]))
;(define (distOu f)
;  (if (or (atomicFbf? f) (negFbf? f)) f
;      (let ((fG (distOu (filsG f))) (fD (distOu (filsD f))))
;        (cond
;          ((andFbf? f) (list (conRac f) fG fD))
;          ((andFbf? fG)
;           (list '^
;                 (distOu (list 'v (filsG fG) fD))
;                 (distOu (list 'v (filsD fG) fD))))
;          ((andFbf? fD)
;           (list '^
;                 (distOu (list 'v fG (filsG fD)))
;                 (distOu (list 'v fG (filsD fD)))))
;          (else (list (conRac f) fG fD))))))

;Q30 retourne une fbf logiquement équivalente sous forme conjonctive
(define (formeConj f)
  (distOu (redNeg (oteCste (oteImp (oteEqu f))))))


; 7 Forme clausale
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (litteral? f)
  (or (symbProp? f) (and (negFbf? f) (symbProp? (fils f)))))

(define (oppose l)
  (if (symbProp? l) (list '! l) (fils l)))


;Q31 retourne la clause correspondante à cette fbf
(define (transClause f)
  (if (or (atomicFbf? f) (negFbf? f)) (list f)
      (set-union (transClause (filsG f)) (transClause(filsD f)))))



;Q32 une fbf sous forme conjonctive et retourne l’ensemble de clauses correspondant à cette fbf

;a testé
(define (ajoutC C EC)
  (cond [(set-empty? EC) (list C)]
        [(not(list? C)) (list EC)]
        [(set=? C (car EC)) EC]
        [else (cons (car EC)(ajoutC C (cdr EC)))]))

(define (unionEC EC1 EC2)
  (if (set-empty? EC2) EC1
      (ajoutC (car EC2)
              (unionEC EC1 (cdr EC2)))))

(define (transEnsClause f)
  (if (or (litteral? f) (orFbf? f)) (list (transClause f))
      (unionEC (transEnsClause (filsG f)) (transEnsClause(filsD f))) ))

;Q33
(define (formeClausale f) (transEnsClause (formeConj f)))

;Q34 teste si une clause passer en parametre est valide
;(define (nbSymbEns S)
;  (if (empty? S) 0
;      (+ 1 (nbSymbEns (cdr S)))))

(define (tautologique c)
  (not (eq? (length c) (length (ensSPallFbf c)))))

;Q35 test si une clause subsume une autre
(define (appartien? a L)
  (ormap (lambda (i) (eq? a i)) L))
(define (subsume c1 c2)
  (andmap (lambda (i) (appartien? i c2)) c1))

;Q36 retourne la forme clausale debarasser de des clause tautologique et subsumé
(define (simpTauto c)
  (letrec ( (f (lambda (p acc)
            (if (empty? p) acc
                (if (tautologique (car p)) (f (cdr p) acc)
                    (f (cdr p) (cons (car p) acc))
                    ))
                 ))
    )(f c '() ) ))

(define (estSubsume a L)
  (ormap (lambda (i) (and (subsume i a) (not (equal? i a))) ) L))

(define (simplifier FC)
  (letrec ( (f (lambda (c fc acc)
                 (cond [(empty? c) acc]
                       [(estSubsume (car c) fc) (f (cdr c) fc acc)]
                       [else (f (cdr c) fc (cons (car c) acc))]))))
    (f (simpTauto FC) (simpTauto FC) '())))

; 8 Méthode de résolution
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Q37 teste si elles possèdent un et un seul littéral opposé

(define (resolvable c1 c2)
  (= (set-count (set-intersect (map oppose c1) c2 )) 1))

;Q38 t calcule la clause résolvante
(define (resolvante c1 c2)
  (set-subtract (set-union c1 c2)
                (set-union (set-intersect (map oppose c1) c2)
                           (set-intersect (map oppose c2) c1)) ))

;Q39 retourne vrai si la clause vide est productible par résolution et faux sinon
;(define (ClauseVideParResolution E N)
;  (let ( (P '() ))
;    (if (empty? N) #f
;        (if
;      
;  ))
; Q39
;(define (getListResolvante fclausalOri fclausal acc)
;  (cond ( [null? (cdr fclausalOri)] acc )
;        ( [null? fclausal] (getListResolvante (cdr fclausalOri) (cddr fclausalOri) acc))
;        ( [resolvable (car fclausalOri) (car fclausal)]
;          (getListResolvante fclausalOri (cdr fclausal)
;                             (set-union acc (list (resolvante (car fclausalOri) (car fclausal))))))
;        ( #t (getListResolvante fclausalOri (cdr fclausal) acc))))
;
;(define (allResolvante fclausal)
;  (set-union fclausal (getListResolvante fclausal (cdr fclausal) '())))
;
;(define (resolvante? fc1Ori fc1 fc1bis fc2)
;  (cond ( [null? fc1] (resolvante? fc1Ori (cdr fc1) (cdr fc1) fc2))
;        ( [null? fc2] #f)
;        ( [resolvable (car fc1bis) (car fc2)] #t)
;        ( #t (resolvante? fc1Ori fc1 (cdr fc1bis) (cdr fc2)))))
;
;(define (clauseVide? fclausal)
;  (cond ( [null? fclausal] #f)
;        ( [equal? (car fclausal) '()] #t)
;        ( #t (clauseVide? (cdr fclausal)))))
;
;(define (clause fclausal)
;  (cond ( [clauseVide? (getListResolvante fclausal (cdr fclausal) '())] #t)
;        ( [resolvante? fclausal
;                       fclausal
;                       fclausal
;                       (getListResolvante fclausal (cdr fclausal) '())]
;          (if [clauseVide? (allResolvante fclausal)] #t (clause (allResolvante fclausal))))
;        ( #t #f)))
; Q39
(define (getListResolvante fclausalOri fclausal acc)
  (cond ( [null? (cdr fclausalOri)] acc )
        ( [null? fclausal] (getListResolvante (cdr fclausalOri) (cddr fclausalOri) acc))
        ( [resolvable (car fclausalOri) (car fclausal)]
          (getListResolvante fclausalOri (cdr fclausal)
                             (set-union acc (list (resolvante (car fclausalOri) (car fclausal))))))
        ( #t (getListResolvante fclausalOri (cdr fclausal) acc))))

(define (allResolvante fclausal)
  (set-union fclausal (getListResolvante fclausal (cdr fclausal) '())))

(define (resolvante? fc1Ori fc1 fc1bis fc2)
  (cond ( [null? fc1] (resolvante? fc1Ori (cdr fc1) (cdr fc1) fc2))
        ( [null? fc2] #f)
        ( [resolvable (car fc1bis) (car fc2)] #t)
        ( #t (resolvante? fc1Ori fc1 (cdr fc1bis) (cdr fc2)))))

(define (clauseVide? fclausal)
  (cond ( [null? fclausal] #f)
        ( [equal? (car fclausal) '()] #t)
        ( #t (clauseVide? (cdr fclausal)))))

(define (clause fclausal)
  (cond ( [clauseVide? (getListResolvante fclausal (cdr fclausal) '())] #t)
        ( [resolvante? fclausal
                       fclausal
                       fclausal
                       (getListResolvante fclausal (cdr fclausal) '())]
          (if [clauseVide? (allResolvante fclausal)] #t (clause (allResolvante fclausal))))
        ( #t #f)))


;;
(define (consequenceResol Ensfbf c)
  (clause (set-union (transEnsClause(formeConj (mettreFormeConj Ensfbf))) (transEnsClause (formeConj (list '! c))))) )

(define (mettreFormeConj Ensfbf)
  (letrec ( (f (lambda (e acc)
               (if (empty? e) acc
                   (f (cdr e) (list '^ (car e) acc))))))
    (f (cdr Ensfbf) (car Ensfbf))))

(define (negFbf f) (list '! f))

;;
(define (satisfiableResol EnsC)
  (not (clause EnsC)))

; 9 Application
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Q41

; DPLL
; Données : F un ens. de clauses C, S un ens. de symboles, I une interprétation.
; Résultat : vrai (satisfiable) ou faux (insatisfiable)
(define (simpleDPLL F S I)
  (andmap (lambda (C) (valide? C)) F) )

(define (clauseValide? C I)
  (if (= 1 (ormap (lambda (C)
                   (cond [(symbProp? C) (intSymb C I)]
                         [else (intNeg (intSymb (fils C) I))] ))C )) #t #f))

; Prend un ensemble de clause et renvoie l'ensemble des symboles propositionnels de ces clauses
(define (ensSPC c)
  (letrec [(f (lambda (c liste)
                (if (set-empty? c)
                    liste
                    (f (cdr c) (set-union (ensSPallFbf (car c)) liste)) )))]
    (f c '()) ))

(define Fone '((a b) ((! a) b) ((! b))))
(define Ftwo '((a) ((! a))))
(define Fthree '((a) (b)))
;(define Sone (ensSPC Fone))
;(define Ione '())
;(simpleDPLL Fone Sone Ione)
;(simpleDPLL '((a b) ((! a) b) ((! b))) (ensSP '((a b) ((! a) b) ((! b)))) '())
;(ensSP '(^ a (v b (! a))))

(define (DPLL F)
  (ormap (lambda(I)
           (andmap (lambda(F)
                     (clauseValide? F I)) F ))
         (ensInt (ensSPC F))))

(DPLL Fone)
(DPLL Ftwo)
(DPLL Fthree)

;#lang racket

; CC
; Vérification de vos fonctions

;Q0 : Donnez le nombre de connecteurs de la formule (a ∧ b)
(display "\n=>q0\n")
(nbc '(^ a b)) ; ou (display "NON FAIT\n")

;Q1 : Définissez la formule G = (((a ↔ b) ∧ c) ∨ ¬b) → ¬a, puis évaluez la (taper G)
(display "\n=>q1\n")


;Q2 : Vérifiez que G est bien formé à l’aide de votre fonction fbf?
(display "\n=>q2\n")


;Q3 : Donnez l’ensemble des symboles propositionnels de G
(display "\n=>q3\n")


;Q4 : Appliquez votre fonction afficher sur G
(display "\n=>q4\n")


;Q5 : Définissez les deux interprétations suivantes et évaluez les (taper J1 puis J2)
;     J 1 (a) = J 1 (b) = 0, J 1 (c) = 1
;     J 2 (a) = J 2 (c) = 1, J 2 (b) = 0
(display "\n=>q5\n")


;Q6 : Calculez la valeur de vérité de G dans l’interprétation J1
(display "\n=>q6\n")


;Q7 : Et dans l’interprétation J2
(display "\n=>q7\n")


;Q8 : Testez la satisfiabilité de G
(display "\n=>q8\n")


;Q9 : Et celle de (p ∧ q) ↔ (p → ¬q)
(display "\n=>q9\n")


;Q10 : Testez la validité de G
(display "\n=>q10\n")


;Q11 : Et la validité de p → (q → p)
(display "\n=>q11\n")


;Q12 : Dites si les formules suivantes sont équivalentes : a ∨ (b ∧ ¬b) et a ∨ (c ∧ ¬c)
(display "\n=>q12\n")


;Q13 : Idem avec p ∧ q et p ∨ q
(display "\n=>q13\n")


;Q14 : Idem avec T et a → a
(display "\n=>q14\n")


;Q15 : Dites si la conséquence logique suivante est établie : {(a ∧ b) ∨ c} |= ¬a → c
(display "\n=>q15\n")


;Q16 : Dites si la conséquence logique suivante est établie : {a → b, b → c} |= a → c
(display "\n=>q16\n")


;Q17 : Même question avec : {a, a ∨ b, b → c} |= b
(display "\n=>q17\n")


;Q18 : Même question avec : {p, a ∨ b, ¬p} |= q
(display "\n=>q18\n")


;Q19 : Calculez (distOu '(^ (v (^ (^ (v (^ a b) c) a) b) c) (v a b)))
(display "\n=>q19\n")


;Q20 : Calculez la forme conjonctive de (p → q) → p
(display "\n=>q20\n")


;Q21 : Calculez la forme clausale de ¬(q ∧ ¬r) ∧ (p → q ∨ (r ∧ ¬p))
(display "\n=>q21\n")


;Q22 : Simplifiez la forme clausale suivante :
; ((a (! b) c) (a c (! d) e) (d e) ((! d) (! a) b d) (c a) ((! b) f e) (d))
(display "\n=>q22\n")


;Q23 : Dites à l’aide de la méthode de résolution si la formule F 1 du TP est satisfiable
(display "\n=>q23\n")


;Q24 : Dites à l’aide de la méthode de résolution si la conséquence logique suivante est établie
; {F 1, F 2, F 3} |= F 4 où F 1, F 2, F 3 et F 4 sont les formules du TP
(display "\n=>q24\n")


;Cluedo

;Q25 : Si vous avez fait la modélisation du Cluedo, donnez les commandes permettant d’obtenir
; la réponse aux 2 questions :
;  — Noemie a-t-elle raison ?
;  — Arthur a-t-il raison ?
(display "\n=>q25\n")


;Programmation d’une fonction supplémentaire

;Q26 : Ecrivez une fonction ssFbf qui étant donné une formule bien formée retourne l’ensemble
; des sous-formules de cette formule.
(display "\n=>q26\n")


;Q27 : Appliquez-la à la formule G précédente
(display "\n=>q27\n")


;Q28 :  Puis appliquez à la formule ((p → q) ∧ (p → q))
(display "\n=>q28\n")


